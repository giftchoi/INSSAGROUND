<?xml version="1.0" encoding="UTF-8"?>
<!-- Sql Mapper -->
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.kosta.inssaground.model.mapper.GroundMapper">
<!-- Result Map -->
	<resultMap type="groundVO" id="groundRM">
		<result column="img_name" property="groundImgVO.imgName" />
		<result column="sigungu_no" property="sigunguVO.sigunguNo" />
	</resultMap>


	<!-- SOJEONG -->
	<select id="getAllGroundList" parameterType="pagingBean" resultMap="groundRM">
	select g.*,s.sigungu_name as area, h.name as hobby, pi.path as img_name,p.participants
		from (
		select row_number() over (order by ground_no) as row_no,g.*
		from ground g where g.status=1) g left join profile_img pi on
		g.master=pi.id, sigungu s, hobby h, (select ground_no,count(*) as participants from insider group by ground_no) p
		where g.sigungu_no=s.sigungu_no and h.hobby_no=g.hobby_no and p.ground_no = g.ground_no and row_no
		between #{startRowNumber} and #{endRowNumber}
	</select>
	<select id="searchGround" parameterType="map"
		resultMap="groundRM">
		select g.*,s.sigungu_name as area, h.name as hobby, p.path as img_name,pr.participants
		from ( select row_number() over (order by ground_no) as row_no,gr.*
		from ground gr,sigungu s, hobby h where status=1 and
		gr.sigungu_no=s.sigungu_no and h.hobby_no=gr.hobby_no 
		<if test="sigungu==null and sido!=null">
			and gr.sigungu_no in (select sigungu_no from sigungu where
			sido_no= #{sido})
		</if>
		<if test="sigungu!=null">
			and gr.sigungu_no = #{sigungu}
		</if>
		<if test="hobby==null and category!=null">
			and gr.hobby_no in (select hobby_no from hobby where
			hobby_category_no= #{category})
		</if>
		<if test="hobby!=null">
			and gr.hobby_no=#{hobby}
		</if>
		<if test="groundVO!=null and groundVO.groundName!=null">
			and gr.ground_name like '%' || #{groundVO.groundName} || '%'
		</if>

		) g left join profile_img p on g.master=p.id, sigungu s, hobby h, (select ground_no,count(*) as participants from insider group by ground_no) pr
		where g.status=1 and g.sigungu_no=s.sigungu_no and h.hobby_no=g.hobby_no
		and g.row_no between #{pagingBean.startRowNumber} and
		#{pagingBean.endRowNumber} and pr.ground_no=g.ground_no
		<if test="sigungu==null and sido!=null">
			and g.sigungu_no in (select sigungu_no from sigungu where
			sido_no= #{sido})
		</if>
		<if test="sigungu!=null">
			and g.sigungu_no = #{sigungu}
		</if>
		<if test="hobby==null and category!=null">
			and g.hobby_no in (select hobby_no from hobby where
			hobby_category_no= #{category})
		</if>
		<if test="hobby!=null">
			and g.hobby_no=#{hobby}
		</if>
		<if test="groundVO!=null and groundVO.groundName!=null">
			and ground_name like '%' || #{groundVO.groundName} || '%'
		</if>
		order by g.ground_no asc
	</select>
	
		<select id="groundDetail" parameterType="groundVO"
		resultMap="groundRM">
		select g.*,s.sigungu_name as area, (select count(*) from
		insider where status=1 and ground_no=#{groundNo}) as participants, i.img_name, h.name as hobby 
		from ground g left join ground_img i on g.ground_no=i.ground_no, sigungu s,hobby h 
		where g.ground_no=#{groundNo} and s.sigungu_no=g.sigungu_no and h.hobby_no=g.hobby_no
	</select>
	
	<select id="getGroundSearchResultCount" parameterType="map"
		resultType="int">
		select count(*) from ground where status=1
		<if test="sigungu==null and sido!=null">
			and sigungu_no in (select sigungu_no from sigungu where
			sido_no= #{sido})
		</if>
		<if test="sigungu!=null">
			and sigungu_no = #{sigungu}
		</if>
		<if test="hobby==null and category!=null">
			and hobby_no in (select hobby_no from hobby where
			hobby_category_no= #{category})
		</if>
		<if test="hobby!=null">
			and hobby_no=#{hobby}
		</if>
		<if test="groundVO!=null and groundVO.groundName!=null">
			and ground_name like '%' || #{groundVO.groundName} || '%'
		</if>
	</select>
	
	<insert id="participateGround" parameterType="map">
		insert into
		insider(ground_no,id) values(#{groundNo},#{id})
	</insert>
	<select id="getParticipationReadyList" parameterType="string"
		resultType="memberVO">
		select m.id,m.name,m.email,p.path as profile from inssa_member m left join profile_img p on m.id=p.id, insider i
		where i.ground_no=#{value} and i.status=0 and i.id=m.id 
	</select>
	<update id="approveParticipation" parameterType="insiderVO">
		update insider
		set status=1 where id=#{memberVO.id} and ground_no=#{groundNo}
	</update>
		<update id="rejectParticipation" parameterType="insiderVO">
		update insider
		set status=2 where id=#{memberVO.id} and ground_no=#{groundNo}
	</update>
	<insert id="registerGroundNotice" parameterType="noticeVO">
		<selectKey keyProperty="noticeNo" resultType="string"
			order="BEFORE">
			select notice_seq.nextval from dual
		</selectKey>
		insert into notice(notice_no,ground_no,content)
		values(#{noticeNo},#{groundNo},#{content})
	</insert>
	<select id="getGroundNoticeCount" resultType="int">
		select count(*)
		from notice where ground_no=#{value}
	</select>
	<select id="getAllGroundNoticeList" parameterType="map"
		resultType="noticeVO">
		select n.notice_no,
		n.ground_no,n.content,to_char(n.time_posted,'YYYY-MM-DD HH24:MI') as
		time_posted
		from (select row_number() over (order by time_posted desc)
		as rnum, n.* from notice n where n.ground_no=#{groundNo}) n
		where n.rnum between #{pagingBean.startRowNumber} and
		#{pagingBean.endRowNumber}
		order by time_posted desc
	</select>
	<select id="getNoticeDetailByNo" resultType="noticeVO">
		select n.notice_no,
		n.ground_no,n.content,to_char(n.time_posted,'YYYY-MM-DD HH24:MI') as
		time_posted
		from notice n
		where notice_no = #{value}
	</select>
	<delete id="deleteGroundNotice">
		delete from notice where
		notice_no=#{value}
	</delete>
	<update id="updateGroundNotice" parameterType="noticeVO">
		update notice set content=#{content} where notice_no=#{noticeNo}
	</update>
	<insert id="insertGroundPost" parameterType="postVO" >
	<selectKey keyProperty="postNo" resultType="string" order="BEFORE">
		select ground_post_seq.nextval from dual
	</selectKey>
		insert into ground_post(post_no,title,content,id,ground_no) values(#{postNo},#{title},#{content},#{insiderVO.memberVO.id},#{insiderVO.groundNo})
	</insert>
	<insert id="insertPostImg" parameterType="map">
		insert into post_img(img_no,img_name,post_no) values(post_img_seq.nextVal,#{imgName},#{postNo})
	</insert>
	<select id="getTotalGroundPostCount" resultType="int">
		select count(*) from ground_post where ground_no=#{value}
	</select>
	<select id="getAllGroundPostList" parameterType="map" resultMap="postVORM">
		select p.post_no,p.title,p.hits,p.id,to_char(p.time_posted,'yyyy-mm-dd hh24:mi') as time_posted
		from 	(select row_number() over(order by post_no desc) as rnum, p.*
					from ground_post p
					where p.ground_no=#{groundNo}) p
		where p.rnum between #{pagingBean.startRowNumber} and #{pagingBean.endRowNumber}
	</select>
	<select id="findPostByPostNo" resultMap="postVORM">
		select post_no,title,content,id,hits,to_char(time_posted,'yyyy.mm.dd hh24:mi') as time_posted from ground_post where post_no=#{value}
	</select>
	<select id="getPicListByPostNo"  parameterType="string" resultType="string">
		select * from ground_post where post_no=#{value}
	</select>
	<update id="updateGroundPost" parameterType="postVO">
		update ground_post set title=#{title},content=#{content} where post_no=#{postNo}
	</update>
	<delete id="deleteAllPostImg" >
		delete from post_img where post_no=#{postNo}
	</delete>
	<delete id="deletePostByPostNo">
		delete from ground_post where post_no=#{postNo}
	</delete>
	<update id="updatePostHits">
		update ground_post set hits=hits+1 where post_no=#{value}
	</update>
	<select id="getHotGroundList" resultMap="groundRM">
	select * from ground where ground_no in (select ground_no
	from(
	select ground_no, rank() over (order by score desc) as rank
	from (
	select a.ground_no, a.cnt+b.cnt as score
	from (select g.ground_no,count(post_no) as cnt
	from ground g left join ground_post p on g.ground_no=p.ground_no where
	status=1
	group by g.ground_no) a,
	(select ground_no, count(id) as cnt
	from insider
	where status=1
	group by ground_no
	) b
	where a.ground_no=b.ground_no
	) ) where rank between 1 and 5)
	</select>
	
	
	
	
	
	<!--DOHYEONG -->
	<select id="getAllSido" resultType="sidoVO">
		select * from sido
	</select>

	<select id="getSigungu" parameterType="string"
		resultType="sigunguVO">
		select * from sigungu where sido_no=#{value}
	</select>

	<select id="findSidoBySidoNo" resultType="sidoVO">
		select * from sido
		where sido_no=#{value}
	</select>

	<select id="findSigunguBySigunguNo" resultType="sigunguVO">
		select * from
		sigungu where sigungu_no=#{value}
	</select>

	<insert id="groundApply" parameterType="groundVO">
		<selectKey keyProperty="groundNo" resultType="string"
			order="BEFORE">
			select ground_seq.nextval from dual
		</selectKey>
		insert into
		ground(ground_no,max_personnel,introduction,ground_name,master,hobby_no,sigungu_no,status)
		values(#{groundNo},#{maxPersonnel},#{introduction},#{groundName},#{master},#{hobby},#{area},0)
	</insert>

	<insert id="registerTag">
		insert into hashtag(content) values(#{value})
	</insert>

	<insert id="groundHashtag" parameterType="groundHashtagVO">
		insert into
		ground_hashtag(ground_no,content) values(#{groundNo},#{content})
	</insert>

	<select id="hashtagBoolean" parameterType="string"
		resultType="int">
		select count(*) from hashtag where content=#{value}
	</select>

	<insert id="registergroundImg" parameterType="groundVO">
		insert into
		ground_img(ground_img_no,ground_no,img_name)
		values(ground_img_seq.nextval,#{groundNo},#{groundImgVO.imgName})
	</insert>


	<select id="findGroundByGroundNo" parameterType="string"
		resultMap="groundRM">
		select
		g.ground_no,g.max_personnel,g.introduction,g.ground_name,g.master,g.hobby_no
		as hobby,g.sigungu_no,i.img_name from ground g left join ground_img i
		on g.ground_no = i.ground_no where g.ground_no=#{value}
	</select>

	<insert id="registergroundschedule" parameterType="scheduleVO">
	<selectKey keyProperty="scheduleNo" resultType="string" order="BEFORE">
		select schedule_seq.nextval from dual
	</selectKey>
		insert into schedule(schedule_no,start_date,end_date,title,loc,content,id,ground_no,max_personnel)
		values(#{scheduleNo},to_date(#{startDate},'YYYY-MM-DD hh24:mi'),to_date(#{endDate},'YYYY-MM-DD hh24:mi'),#{title},#{loc},#{content},#{insiderVO.memberVO.id},#{groundVO.groundNo},#{maxPersonnel})
	</insert>

	<resultMap type="scheduleVO" id="scheduleVORM">
		<result column="id" property="insiderVO.memberVO.id" />
	</resultMap>
	<select id="grouondScheduleList" parameterType="map"
		resultMap="scheduleVORM">
		select
		content,ground_no,id,loc,max_personnel,schedule_no,title
		from (
		select row_number() over(order by schedule_no desc) as
		rnum,content,ground_no,id,loc,max_personnel,schedule_no,title
		from schedule where ground_no=#{groundVO.groundNo})
		where rnum between
		#{pagingBean.startRowNumber} and #{pagingBean.endRowNumber}
		order by
		schedule_no desc
	</select>

	<resultMap type="scheduleVO" id="scheduleRM">
		<result column="id" property="insiderVO.memberVO.id" />
		<result column="ground_no" property="groundVO.groundNo" />
	</resultMap>

	<select id="findGroundScheduleByScheduleNo" parameterType="scheduleVO" resultMap="scheduleRM">
		select content,to_char(end_date,'YYYY-MM-DD pm hh:mi') as endDate,to_char(start_date,'YYYY-MM-DD pm hh:mi') as startDate,ground_no,id,loc,max_personnel,schedule_no,title
		from schedule where schedule_no=#{scheduleNo}
	</select>


	<select id="groundScheduleTotalCount" parameterType="groundVO"
		resultType="int">
		select count(*) from schedule where ground_no=#{groundNo}
	</select>
	
	<delete id="deleteGroundSchedule" parameterType="scheduleVO">
		delete from schedule where schedule_no=#{scheduleNo}
	</delete>
	
	<delete id="deletePaticipation" >
		delete from participant where schedule_no=#{value}
	</delete>
	
	<update id="updateGroundSchedule" parameterType="scheduleVO">		
		update schedule 
		set title=#{title},
		max_personnel=#{maxPersonnel},
		start_date=to_date(#{startDate},'yyyy-mm-dd hh24:mi'),
		end_date=to_date(#{endDate},'yyyy-mm-dd hh24:mi'),
		content=#{content},
		loc=#{loc} 
		where schedule_no=#{scheduleNo}
	</update>
	
	<resultMap type="insiderVO" id="insiderRM">
		<result column="id" property="memberVO.id"/>
		<result column="email" property="memberVO.email"/>
		<result column="name" property="memberVO.name"/>
	</resultMap>
	<select id="findGroundMemberListByGroundNo" parameterType="groundVO" resultMap="insiderRM">
		select m.id,m.email,m.name,i.attendance
		from insider i,inssa_member m
		where i.id=m.id and i.status=1 and i.ground_no=#{groundNo} and i.status=1
	</select>	
	
	<select id="groundHomeInsider"  parameterType="insiderVO" resultType="insiderVO">
		select attendance from insider where id=#{memberVO.id} and ground_no=#{groundNo}
	</select>
	
	<insert id="scheduleParticipation" parameterType="map">
		insert into participant(id,schedule_no,ground_no) values(#{memberVO.id},#{scheduleNo},#{groundVO.groundNo})
	</insert>
	
	<select id="scheduleParticipationMember" parameterType="map" resultType="memberVO">
		select id from participant where ground_no=#{groundVO.groundNo} and schedule_no=#{scheduleNo}
	</select>
	
	<select id="newNotice" parameterType="groundVO" resultType="noticeVO">
		select * from notice where notice_no=(select max(n.notice_no) from( select notice_no from notice where ground_no=#{groundNo}) n)
	</select>
	<select id="newPost" resultMap="postVORM">
		select post_no,title,content,id,timePosted,ground_no
		from (
		select row_number() over(order by post_no desc) as
		rnum,post_no,title,content,id,to_char(time_posted,'yyyy-mm-dd hh24:mi') as timePosted,ground_no
		from ground_post where ground_no=#{value})
		where ground_no=#{value} and rnum between
		1 and 2 order by
		post_no desc
	</select>
	
	<resultMap type="postVO" id="postVORM">
		<result column="id" property="insiderVO.memberVO.id"/>
	</resultMap>
	<select id="groundPicture" parameterType="groundVO" resultType="string">
		select img_name
		from(select p.post_no,i.img_name,rank() over(order by p.time_posted desc) as rank
		from ground_post p, post_img i
		where p.post_no=i.post_no and p.ground_no=#{groundNo})
		where rank between 1 and 15
	</select>
	
	<select id="ParticipationBoolean" parameterType="map" resultType="int"> 
		select count(*) from participant where id=#{memberVO.id} and schedule_no=#{scheduleNo}
	</select>
	
	<select id="scheduleCurrPersonnel" resultType="int">
		select count(*) from PARTICIPANT where schedule_no=#{value}
	</select>
	
	<update id="addAttendance" parameterType="map">
		update insider set attendance=attendance+1 where ground_no=${groundNo} and id=#{id}
	</update>
	
	<select id="groundMemberPostCount" resultType="int" parameterType="map">
		select count(*) from ground_post where id=#{id} and ground_no=#{groundNo}
	</select>
	
	<select id="groundMemberAttendance" resultType="int" parameterType="map">
		select attendance from insider where id=#{id} and ground_no=#{groundNo}
	</select>
	
	<select id="groundMemberScheduleCount" resultType="int" parameterType="map">
		select count(*) from schedule where id=#{id} and ground_no=#{groundNo}
	</select>
	
	<select id="groundMemberParticipationCount" resultType="int" parameterType="map">
		select count(*) from participant where ground_no=#{groundNo} and id=#{id}
	</select>
	
	<update id="withdrawGround" parameterType="map">
		update insider set status=3 where id=#{id} and ground_no=#{groundNo}
	</update>
	
	<update id="withdrawinsider">
		udpate insider set status=3 where id=#{value}
	</update>
	
	<resultMap type="scheduleVO" id="sch">
		<result column="id" property="insiderVO.memberVO.id"/>
	</resultMap>
	<select id="newSchedule" resultMap="sch">
		select schedule_no,to_char(start_date,'yyyy-mm-dd pm hh:mi') as startDate,to_char(end_date,'yyyy-mm-dd pm hh:mi') as endDate,title,loc,content,max_personnel,id
			from schedule where schedule_no=(select max(s.schedule_no) from( select schedule_no from schedule where ground_no=#{value}) s)
	</select>
	
	
	<!-- JISUN -->
	<select id="getTotalApplyGroundList" resultType="int">
		select count(*)
		from ground where status=0
	</select>
	<select id="getApplyGroundList" resultType="groundVO"
		parameterType="pagingBean">
		SELECT ag.* FROM(
		SELECT row_number() over(order by ground_no desc) as rnum,
		ground_no, ground_name, master
		FROM ground where status=0
		) ag
		where rnum between #{startRowNumber} and
		#{endRowNumber}
		order by ground_no desc
	</select>
	<select id="getHashtagList" resultType="string">
		select content from
		ground_hashtag where ground_no=#{value}
	</select>
	<update id="permitGround" parameterType="string">
		update ground set
		status=1 where ground_no=#{value}
	</update>
	<update id="rejectGround" parameterType="string">
		update ground set
		status=2 where ground_no=#{value}
	</update>
	<insert id="insertInsider" parameterType="map">
		insert into
		insider(ground_no,id,attendance,status) values(#{groundNo},#{id},0,1)
	</insert>
	<select id="getTotalmyScheduleList" resultType="int">
		select count(*) from PARTICIPANT where id=#{value}
	</select>
 	<resultMap type="scheduleVO" id="scheduleGNRM">
		<result column="ground_name" property="groundVO.groundName"/>
	</resultMap>
	<select id="getScheduleList" parameterType="map" resultMap="scheduleGNRM">
		SELECT sch.* FROM(
		SELECT row_number() over(order by p.schedule_no desc) as rnum,
			to_char(s.end_date,'YYYY-MM-DD pm hh:mi') as endDate,to_char(s.start_date,'YYYY-MM-DD pm hh:mi') as startDate,g.ground_name,s.loc,s.schedule_no,s.title
		FROM PARTICIPANT p, schedule s,ground g  where p.schedule_no = s.schedule_no and p.id=#{id} and g.ground_no=p.ground_no
		) sch
		where rnum between #{pagingBean.startRowNumber} and
		#{pagingBean.endRowNumber}
		order by sch.schedule_no desc
	</select> 
</mapper>
 